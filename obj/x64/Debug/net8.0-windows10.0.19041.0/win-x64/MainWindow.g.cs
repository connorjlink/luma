#pragma checksum "C:\Users\Connor\Desktop\luma\MainWindow.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "10D1E28CDF6C77D1343F17E97323F7B12FD6CD5A4CF53B71FF731BBB48ADA535"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace luma
{
    partial class MainWindow : 
        global::Microsoft.UI.Xaml.Window, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_Panel_Background(global::Microsoft.UI.Xaml.Controls.Panel obj, global::Microsoft.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.Brush) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(global::Microsoft.UI.Xaml.Controls.FontIcon obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Glyph = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(global::Microsoft.UI.Xaml.DependencyObject obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                global::Microsoft.UI.Xaml.Controls.ToolTipService.SetToolTip(obj, value);
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(global::Microsoft.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ContentControl_Content(global::Microsoft.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBox_Text(global::Microsoft.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Value(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Value = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Microsoft.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Image_Source(global::Microsoft.UI.Xaml.Controls.Image obj, global::Microsoft.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class MainWindow_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainWindow_Bindings
        {
            private global::luma.MainWindow dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.Grid obj3;
            private global::Microsoft.UI.Xaml.Controls.StackPanel obj4;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj7;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj8;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj9;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj10;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj11;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj12;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj13;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj14;
            private global::Microsoft.UI.Xaml.Controls.Button obj15;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj16;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj17;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj18;
            private global::Microsoft.UI.Xaml.Controls.Button obj19;
            private global::Microsoft.UI.Xaml.Controls.Button obj20;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj21;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj22;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj23;
            private global::Microsoft.UI.Xaml.Controls.Slider obj24;
            private global::Microsoft.UI.Xaml.Controls.Slider obj25;
            private global::Microsoft.UI.Xaml.Controls.ToggleSwitch obj26;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj27;
            private global::Microsoft.UI.Xaml.Controls.Image obj28;

            // Fields for each event bindings event handler.
            private global::Microsoft.UI.Xaml.RoutedEventHandler obj15Click;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3BackgroundDisabled = false;
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5GlyphDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj7GlyphDisabled = false;
            private static bool isobj8TextDisabled = false;
            private static bool isobj9GlyphDisabled = false;
            private static bool isobj10TextDisabled = false;
            private static bool isobj11GlyphDisabled = false;
            private static bool isobj12TextDisabled = false;
            private static bool isobj13GlyphDisabled = false;
            private static bool isobj14TextDisabled = false;
            private static bool isobj16TextDisabled = false;
            private static bool isobj16ToolTipDisabled = false;
            private static bool isobj17GlyphDisabled = false;
            private static bool isobj18GlyphDisabled = false;
            private static bool isobj19IsEnabledDisabled = false;
            private static bool isobj20ContentDisabled = false;
            private static bool isobj21VisibilityDisabled = false;
            private static bool isobj22TextDisabled = false;
            private static bool isobj23TextDisabled = false;
            private static bool isobj24ValueDisabled = false;
            private static bool isobj25ValueDisabled = false;
            private static bool isobj26IsOnDisabled = false;
            private static bool isobj27GlyphDisabled = false;
            private static bool isobj28SourceDisabled = false;

            private MainWindow_obj1_BindingsTracking bindingsTracking;

            public MainWindow_obj1_Bindings()
            {
                this.bindingsTracking = new MainWindow_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 193 && columnNumber == 6)
                {
                    isobj3BackgroundDisabled = true;
                }
                else if (lineNumber == 231 && columnNumber == 25)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 233 && columnNumber == 27)
                {
                    isobj5GlyphDisabled = true;
                }
                else if (lineNumber == 240 && columnNumber == 28)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 252 && columnNumber == 27)
                {
                    isobj7GlyphDisabled = true;
                }
                else if (lineNumber == 259 && columnNumber == 28)
                {
                    isobj8TextDisabled = true;
                }
                else if (lineNumber == 271 && columnNumber == 27)
                {
                    isobj9GlyphDisabled = true;
                }
                else if (lineNumber == 278 && columnNumber == 28)
                {
                    isobj10TextDisabled = true;
                }
                else if (lineNumber == 290 && columnNumber == 27)
                {
                    isobj11GlyphDisabled = true;
                }
                else if (lineNumber == 297 && columnNumber == 28)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 309 && columnNumber == 27)
                {
                    isobj13GlyphDisabled = true;
                }
                else if (lineNumber == 316 && columnNumber == 28)
                {
                    isobj14TextDisabled = true;
                }
                else if (lineNumber == 205 && columnNumber == 25)
                {
                    this.obj15.Click -= obj15Click;
                }
                else if (lineNumber == 215 && columnNumber == 28)
                {
                    isobj16TextDisabled = true;
                }
                else if (lineNumber == 217 && columnNumber == 28)
                {
                    isobj16ToolTipDisabled = true;
                }
                else if (lineNumber == 219 && columnNumber == 27)
                {
                    isobj17GlyphDisabled = true;
                }
                else if (lineNumber == 208 && columnNumber == 31)
                {
                    isobj18GlyphDisabled = true;
                }
                else if (lineNumber == 173 && columnNumber == 33)
                {
                    isobj19IsEnabledDisabled = true;
                }
                else if (lineNumber == 178 && columnNumber == 33)
                {
                    isobj20ContentDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 36)
                {
                    isobj21VisibilityDisabled = true;
                }
                else if (lineNumber == 154 && columnNumber == 38)
                {
                    isobj22TextDisabled = true;
                }
                else if (lineNumber == 136 && columnNumber == 38)
                {
                    isobj23TextDisabled = true;
                }
                else if (lineNumber == 119 && columnNumber == 37)
                {
                    isobj24ValueDisabled = true;
                }
                else if (lineNumber == 98 && columnNumber == 37)
                {
                    isobj25ValueDisabled = true;
                }
                else if (lineNumber == 77 && columnNumber == 43)
                {
                    isobj26IsOnDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 35)
                {
                    isobj27GlyphDisabled = true;
                }
                else if (lineNumber == 187 && columnNumber == 24)
                {
                    isobj28SourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // MainWindow.xaml line 191
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                        break;
                    case 4: // MainWindow.xaml line 229
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                        break;
                    case 5: // MainWindow.xaml line 233
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        break;
                    case 6: // MainWindow.xaml line 240
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 7: // MainWindow.xaml line 252
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        break;
                    case 8: // MainWindow.xaml line 259
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 9: // MainWindow.xaml line 271
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        break;
                    case 10: // MainWindow.xaml line 278
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 11: // MainWindow.xaml line 290
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        break;
                    case 12: // MainWindow.xaml line 297
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 13: // MainWindow.xaml line 309
                        this.obj13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        break;
                    case 14: // MainWindow.xaml line 316
                        this.obj14 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 15: // MainWindow.xaml line 204
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        this.obj15Click = (global::System.Object p0, global::Microsoft.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            if (this.dataRoot != null)
                            {
                                this.dataRoot.OpenNotificationFlyout(p0, p1);
                            }
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target)).Click += obj15Click;
                        break;
                    case 16: // MainWindow.xaml line 213
                        this.obj16 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 17: // MainWindow.xaml line 219
                        this.obj17 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        break;
                    case 18: // MainWindow.xaml line 208
                        this.obj18 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        break;
                    case 19: // MainWindow.xaml line 170
                        this.obj19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 20: // MainWindow.xaml line 177
                        this.obj20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 21: // MainWindow.xaml line 58
                        this.obj21 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 22: // MainWindow.xaml line 153
                        this.obj22 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_22(this.obj22);
                        break;
                    case 23: // MainWindow.xaml line 135
                        this.obj23 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_23(this.obj23);
                        break;
                    case 24: // MainWindow.xaml line 113
                        this.obj24 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                        this.bindingsTracking.RegisterTwoWayListener_24(this.obj24);
                        break;
                    case 25: // MainWindow.xaml line 92
                        this.obj25 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                        this.bindingsTracking.RegisterTwoWayListener_25(this.obj25);
                        break;
                    case 26: // MainWindow.xaml line 76
                        this.obj26 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                        this.bindingsTracking.RegisterTwoWayListener_26(this.obj26);
                        break;
                    case 27: // MainWindow.xaml line 49
                        this.obj27 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        break;
                    case 28: // MainWindow.xaml line 187
                        this.obj28 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::luma.MainWindow>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::luma.MainWindow obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
                this.Update_luma_LumaViewModel_CPU_GLYPH(global::luma.LumaViewModel.CPU_GLYPH, phase);
                this.Update_luma_LumaViewModel_RAM_GLYPH(global::luma.LumaViewModel.RAM_GLYPH, phase);
                this.Update_luma_LumaViewModel_SPEED_GLYPH(global::luma.LumaViewModel.SPEED_GLYPH, phase);
                this.Update_luma_LumaViewModel_CLOCK_GLYPH(global::luma.LumaViewModel.CLOCK_GLYPH, phase);
                this.Update_luma_LumaViewModel_LIGHTNING_GLYPH(global::luma.LumaViewModel.LIGHTNING_GLYPH, phase);
                this.Update_luma_LumaViewModel_MESSAGE_GLYPH(global::luma.LumaViewModel.MESSAGE_GLYPH, phase);
                this.Update_luma_LumaViewModel_SETTINGS_GLYPH(global::luma.LumaViewModel.SETTINGS_GLYPH, phase);
            }
            private void Update_ViewModel(global::luma.LumaViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_StatusBarColor(obj.StatusBarColor, phase);
                        this.Update_ViewModel_IsStatusVisible(obj.IsStatusVisible, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CpuUsage(obj.CpuUsage, phase);
                        this.Update_ViewModel_RamUsage(obj.RamUsage, phase);
                        this.Update_ViewModel_FillRate(obj.FillRate, phase);
                        this.Update_ViewModel_FrameTime(obj.FrameTime, phase);
                        this.Update_ViewModel_FrameNumber(obj.FrameNumber, phase);
                        this.Update_ViewModel_StatusMessage(obj.StatusMessage, phase);
                        this.Update_ViewModel_StatusTooltip(obj.StatusTooltip, phase);
                        this.Update_ViewModel_StatusIcon(obj.StatusIcon, phase);
                        this.Update_ViewModel_IsSettingModified(obj.IsSettingModified, phase);
                        this.Update_ViewModel_RunStopButtonText(obj.RunStopButtonText, phase);
                        this.Update_ViewModel_Height(obj.Height, phase);
                        this.Update_ViewModel_Width(obj.Width, phase);
                        this.Update_ViewModel_Samples(obj.Samples, phase);
                        this.Update_ViewModel_Bounces(obj.Bounces, phase);
                        this.Update_ViewModel_IsAccumulationEnabled(obj.IsAccumulationEnabled, phase);
                        this.Update_ViewModel_FramebufferBitmap(obj.FramebufferBitmap, phase);
                    }
                }
            }
            private void Update_ViewModel_StatusBarColor(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 191
                    if (!isobj3BackgroundDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Panel_Background(this.obj3, (global::Microsoft.UI.Xaml.Media.Brush) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.Brush), obj), null);
                    }
                }
            }
            private void Update_ViewModel_IsStatusVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_IsStatusVisible_Cast_IsStatusVisible_To_Visibility(obj ? global::Microsoft.UI.Xaml.Visibility.Visible : global::Microsoft.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_IsStatusVisible_Cast_IsStatusVisible_To_Visibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 229
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj4, obj);
                    }
                }
            }
            private void Update_luma_LumaViewModel_CPU_GLYPH(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 233
                    if (!isobj5GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj5, obj, null);
                    }
                }
            }
            private void Update_ViewModel_CpuUsage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 240
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                }
            }
            private void Update_luma_LumaViewModel_RAM_GLYPH(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 252
                    if (!isobj7GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_RamUsage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 259
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj, null);
                    }
                }
            }
            private void Update_luma_LumaViewModel_SPEED_GLYPH(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 271
                    if (!isobj9GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj9, obj, null);
                    }
                }
            }
            private void Update_ViewModel_FillRate(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 278
                    if (!isobj10TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj10, obj, null);
                    }
                }
            }
            private void Update_luma_LumaViewModel_CLOCK_GLYPH(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 290
                    if (!isobj11GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel_FrameTime(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 297
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                    }
                }
            }
            private void Update_luma_LumaViewModel_LIGHTNING_GLYPH(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 309
                    if (!isobj13GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_FrameNumber(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 316
                    if (!isobj14TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj, null);
                    }
                }
            }
            private void Update_ViewModel_StatusMessage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 213
                    if (!isobj16TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                    }
                }
            }
            private void Update_ViewModel_StatusTooltip(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 213
                    if (!isobj16ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj16, obj, null);
                    }
                }
            }
            private void Update_ViewModel_StatusIcon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 219
                    if (!isobj17GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj17, obj, null);
                    }
                }
            }
            private void Update_luma_LumaViewModel_MESSAGE_GLYPH(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 208
                    if (!isobj18GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj18, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsSettingModified(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_IsSettingModified_Cast_IsSettingModified_To_Visibility(obj ? global::Microsoft.UI.Xaml.Visibility.Visible : global::Microsoft.UI.Xaml.Visibility.Collapsed, phase);
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 170
                    if (!isobj19IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj19, obj);
                    }
                }
            }
            private void Update_ViewModel_RunStopButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 177
                    if (!isobj20ContentDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ContentControl_Content(this.obj20, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsSettingModified_Cast_IsSettingModified_To_Visibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 58
                    if (!isobj21VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj21, obj);
                    }
                }
            }
            private void Update_ViewModel_Height(global::System.UInt32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 153
                    if (!isobj22TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj22, obj.ToString(), null);
                    }
                }
            }
            private void Update_ViewModel_Width(global::System.UInt32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 135
                    if (!isobj23TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj23, obj.ToString(), null);
                    }
                }
            }
            private void Update_ViewModel_Samples(global::System.UInt32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 113
                    if (!isobj24ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj24, obj);
                    }
                }
            }
            private void Update_ViewModel_Bounces(global::System.UInt32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 92
                    if (!isobj25ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj25, obj);
                    }
                }
            }
            private void Update_ViewModel_IsAccumulationEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 76
                    if (!isobj26IsOnDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj26, obj);
                    }
                }
            }
            private void Update_luma_LumaViewModel_SETTINGS_GLYPH(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 49
                    if (!isobj27GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj27, obj, null);
                    }
                }
            }
            private void Update_ViewModel_FramebufferBitmap(global::Microsoft.UI.Xaml.Media.Imaging.WriteableBitmap obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainWindow.xaml line 187
                    if (!isobj28SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj28, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_22_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Height = (global::System.UInt32) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.UInt32), this.obj22.Text);
                        }
                    }
                }
            }
            private void UpdateTwoWay_23_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Width = (global::System.UInt32) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.UInt32), this.obj23.Text);
                        }
                    }
                }
            }
            private void UpdateTwoWay_24_Value()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Samples = (global::System.UInt32)this.obj24.Value;
                        }
                    }
                }
            }
            private void UpdateTwoWay_25_Value()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Bounces = (global::System.UInt32)this.obj25.Value;
                        }
                    }
                }
            }
            private void UpdateTwoWay_26_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.IsAccumulationEnabled = this.obj26.IsOn;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainWindow_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainWindow_obj1_Bindings> weakRefToBindingObj; 

                public MainWindow_obj1_BindingsTracking(MainWindow_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainWindow_obj1_Bindings>(obj);
                }

                public MainWindow_obj1_Bindings TryGetBindingObject()
                {
                    MainWindow_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainWindow_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::luma.LumaViewModel obj = sender as global::luma.LumaViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_CpuUsage(obj.CpuUsage, DATA_CHANGED);
                                bindings.Update_ViewModel_RamUsage(obj.RamUsage, DATA_CHANGED);
                                bindings.Update_ViewModel_FillRate(obj.FillRate, DATA_CHANGED);
                                bindings.Update_ViewModel_FrameTime(obj.FrameTime, DATA_CHANGED);
                                bindings.Update_ViewModel_FrameNumber(obj.FrameNumber, DATA_CHANGED);
                                bindings.Update_ViewModel_StatusMessage(obj.StatusMessage, DATA_CHANGED);
                                bindings.Update_ViewModel_StatusTooltip(obj.StatusTooltip, DATA_CHANGED);
                                bindings.Update_ViewModel_StatusIcon(obj.StatusIcon, DATA_CHANGED);
                                bindings.Update_ViewModel_IsSettingModified(obj.IsSettingModified, DATA_CHANGED);
                                bindings.Update_ViewModel_RunStopButtonText(obj.RunStopButtonText, DATA_CHANGED);
                                bindings.Update_ViewModel_Height(obj.Height, DATA_CHANGED);
                                bindings.Update_ViewModel_Width(obj.Width, DATA_CHANGED);
                                bindings.Update_ViewModel_Samples(obj.Samples, DATA_CHANGED);
                                bindings.Update_ViewModel_Bounces(obj.Bounces, DATA_CHANGED);
                                bindings.Update_ViewModel_IsAccumulationEnabled(obj.IsAccumulationEnabled, DATA_CHANGED);
                                bindings.Update_ViewModel_FramebufferBitmap(obj.FramebufferBitmap, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CpuUsage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CpuUsage(obj.CpuUsage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RamUsage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_RamUsage(obj.RamUsage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FillRate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FillRate(obj.FillRate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FrameTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FrameTime(obj.FrameTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FrameNumber":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FrameNumber(obj.FrameNumber, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StatusMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StatusMessage(obj.StatusMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StatusTooltip":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StatusTooltip(obj.StatusTooltip, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StatusIcon":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StatusIcon(obj.StatusIcon, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSettingModified":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsSettingModified(obj.IsSettingModified, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RunStopButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_RunStopButtonText(obj.RunStopButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Height":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Height(obj.Height, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Width":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Width(obj.Width, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Samples":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Samples(obj.Samples, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Bounces":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Bounces(obj.Bounces, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAccumulationEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsAccumulationEnabled(obj.IsAccumulationEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FramebufferBitmap":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FramebufferBitmap(obj.FramebufferBitmap, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::luma.LumaViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::luma.LumaViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void RegisterTwoWayListener_22(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_22_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_23(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_23_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_24(global::Microsoft.UI.Xaml.Controls.Slider sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_24_Value();
                        }
                    });
                }
                public void RegisterTwoWayListener_25(global::Microsoft.UI.Xaml.Controls.Slider sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_25_Value();
                        }
                    });
                }
                public void RegisterTwoWayListener_26(global::Microsoft.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_26_IsOn();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // MainWindow.xaml line 13
                {
                    this.MainGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 15: // MainWindow.xaml line 204
                {
                    this.NotificationButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 19: // MainWindow.xaml line 170
                {
                    global::Microsoft.UI.Xaml.Controls.Button element19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element19).Click += this.SaveRenderingSettings;
                }
                break;
            case 20: // MainWindow.xaml line 177
                {
                    global::Microsoft.UI.Xaml.Controls.Button element20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element20).Click += this.RunStopRenderer;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainWindow.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Window element1 = (global::Microsoft.UI.Xaml.Window)target;
                    MainWindow_obj1_Bindings bindings = new MainWindow_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Activated += bindings.Activated;
                }
                break;
            }
            return returnValue;
        }
    }
}

